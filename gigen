#!/usr/bin/env python
# -*- coding: utf-8 -*-
## ------------------------------------------------------ ##
##   ________ __  ________                                ##
##  /  _____/|__|/  _____/  ____   ____                   ##
## /   \  ___|  /   \  ____/ __ \ /    \                  ##
## \    \_\  |  \    \_\  \  ___/|   |  \                 ##
##  \______  |__|\______  /\___  |___|  /                 ##
##         \/           \/     \/     \/                  ##
##                                                        ##
## GitIgnore Generator                                    ##
## @version: 0.2.1                                        ##
## @author: Giuseppe Ricupero                             ##
## @e-mail: <giuseppe.ricupero@polito.it>                 ##
## @date: 2020-11-17 08.07                                ##
## @description:                                          ##
## create a gitignore file accordind to the keywords      ##
## passed as parameters using the gitignore.io api        ##
## ------------------------------------------------------ ##
import sys
import requests
import re
import os

class GitIgnoreFile:
    def __init__(self,path,content):
        self.path = path
        self.content = content

    def save(self):
        path = os.path.join(self.path,'.gitignore')
        if os.path.isfile(path):
            res = input("'%s' file already exists. Do you want to overwrite it? [y/n] " % path).lower()
            if res.startswith('y'):
                gitignore_file = open(path,"w")
                gitignore_file.write(self.content)
                gitignore_file.close()
                print("File '%s' created" % path)
            else:
                print('Nothing done.')

class GitIgnoreSite:
    base_url = 'https://www.toptal.com/developers/gitignore/api/'

    def keywords(self):
        response = requests.get(self.base_url + 'list')
        return response.text

    def generate(self,keywords):
        csk = ",".join(keywords)
        response = requests.get(self.base_url + csk)
        return re.sub(r'# Created by (https://\S+)',r'# Created by GiGen (https://github.com/grational/gigen) using \1',response.text)

class CommandLineParser:
    allowed_commands = ['list','view','create']

    def __init__(self,argv):
        if len(argv) < 2 or argv[1] not in self.allowed_commands:
            raise Exception('Not enough or invalid arguments!')
        self.command = argv[1]
        if not self.command == 'list':
            self.__additional_params(argv[2:])

    def __additional_params(self,params):
        # handle 1-n keywords params
        self.keywords = params
        if len(self.keywords) == 0:
           raise Exception('No keywords passed!')
        # handle optional path last parameter
        possible_path = params[-1]
        if self.command == 'create':
            if os.path.isdir(possible_path):
                self.keywords = params[:-1]
                self.path = params[-1]
            else:
                self.path = '.'

def usage():
    myself = re.sub('^.*/','',__file__)
    print('%s (gitignore generator)' % myself, file=sys.stderr)
    print('', file=sys.stderr)
    print('- To list available gitignore.io keywords:', file=sys.stderr)
    print('    %s list' % myself, file=sys.stderr)
    print('', file=sys.stderr)
    print('- To print the gitignore file given by the keywords:', file=sys.stderr)
    print('    %s view <space separated keywords>' % myself, file=sys.stderr)
    print('', file=sys.stderr)
    print('- To create the gitignore file given by the keywords:', file=sys.stderr)
    print('    %s create <keywords>' % myself, file=sys.stderr)

def main():
    try:
        cli_parser = CommandLineParser(sys.argv)
        gitignore_site = GitIgnoreSite()
        command = cli_parser.command

        if command == 'list':
            print(gitignore_site.keywords())
        else:
            gitignore_content = gitignore_site.generate(cli_parser.keywords)
            if command == 'view':
                print(gitignore_content)
            elif command == 'create':
                path = cli_parser.path
                gitignore_file = GitIgnoreFile(path,gitignore_content)
                gitignore_file.save()
    except Exception as e:
        print("err> %s" % e, file=sys.stderr)
        usage()
        sys.exit(1)


if __name__ == "__main__":
    main()
    sys.exit(0)

# vim: fdm=indent
